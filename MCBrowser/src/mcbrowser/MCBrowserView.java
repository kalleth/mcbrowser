/*
 * MCBrowserView.java
 */

package mcbrowser;

import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.AbstractAction;
import javax.swing.DefaultListModel;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import java.util.TimerTask;
import java.util.Timer;
import java.awt.Cursor;
import java.net.URISyntaxException;

/**
 * The application's main frame.
 */
public class MCBrowserView extends FrameView {

    public MCBrowserView(SingleFrameApplication app) {
        super(app);

        initComponents();

        createButtonActions();
    }

    public void createButtonActions() {
        actDisconnect = new AbstractAction("Disconnect from Memcache") {
                public void actionPerformed(ActionEvent e) {
                    disconnectFromMemcache();
                }
            };
        actConnect = new AbstractAction("Connect to Memcache") {
                public void actionPerformed(ActionEvent e) {
                    connectToMemcache();
                }
            };
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = MCBrowserApp.getApplication().getMainFrame();
            aboutBox = new MCBrowserAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        MCBrowserApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tbServerIP = new javax.swing.JTextField();
        tbServerPort = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnConnect = new javax.swing.JButton();
        radioOutputRaw = new javax.swing.JRadioButton();
        radioOutputRuby = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listKeys = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOutputData = new javax.swing.JTextArea();
        radioOutputGroup = new javax.swing.ButtonGroup();

        mainPanel.setName("mainPanel"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setName("jPanel1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(mcbrowser.MCBrowserApp.class).getContext().getResourceMap(MCBrowserView.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        tbServerIP.setText(resourceMap.getString("tbServerIP.text")); // NOI18N
        tbServerIP.setName("tbServerIP"); // NOI18N

        tbServerPort.setText(resourceMap.getString("tbServerPort.text")); // NOI18N
        tbServerPort.setName("tbServerPort"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(mcbrowser.MCBrowserApp.class).getContext().getActionMap(MCBrowserView.class, this);
        btnConnect.setAction(actionMap.get("connectToMemcache")); // NOI18N
        btnConnect.setText(resourceMap.getString("btnConnect.text")); // NOI18N
        btnConnect.setName("btnConnect"); // NOI18N

        radioOutputGroup.add(radioOutputRaw);
        radioOutputRaw.setSelected(true);
        radioOutputRaw.setText(resourceMap.getString("radioOutputRaw.text")); // NOI18N
        radioOutputRaw.setName("radioOutputRaw"); // NOI18N

        radioOutputGroup.add(radioOutputRuby);
        radioOutputRuby.setText(resourceMap.getString("radioOutputRuby.text")); // NOI18N
        radioOutputRuby.setName("radioOutputRuby"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tbServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tbServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnConnect, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(radioOutputRaw)
                        .addGap(18, 18, 18)
                        .addComponent(radioOutputRuby)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tbServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(tbServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioOutputRaw)
                    .addComponent(radioOutputRuby))
                .addContainerGap(4, Short.MAX_VALUE))
        );

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setName("jPanel2"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        listKeys.setName("listKeys"); // NOI18N
        listKeys.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listKeysValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listKeys);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setName("jPanel3"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        txtOutputData.setColumns(20);
        txtOutputData.setLineWrap(true);
        txtOutputData.setRows(5);
        txtOutputData.setName("txtOutputData"); // NOI18N
        jScrollPane2.setViewportView(txtOutputData);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                    .addComponent(jLabel5))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(396, 396, 396))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(11, 11, 11)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        setComponent(mainPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void listKeysValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listKeysValueChanged
        // TODO add your handling code here:
        if (evt.getValueIsAdjusting()) {
            String key = listKeys.getSelectedValue().toString();
            System.out.println("Getting: " + key);
            getDataFromKey(key);
        }
    }//GEN-LAST:event_listKeysValueChanged

    public void getDataFromKey(String key) {
        try {
            mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            if (radioOutputGroup.isSelected(radioOutputRaw.getModel())) {
                try {
                    String data = mcConnection.getDataForKey(key);
                    txtOutputData.setText(data);
                } catch (IOException e) {
                    //attempt reconnection
                    try {
                        mcConnection.closeConnection();
                        if (mcConnection.connectToMemcacheServer()) {
                            getDataFromKey(key);
                        }
                    } catch(IOException ex) {
                        System.err.println("Failed reconnecting to memcache..");
                    }
                }
            } else if (radioOutputGroup.isSelected(radioOutputRuby.getModel())) {
                Runtime rt = Runtime.getRuntime();
                String folderPath = System.getProperty("user.dir");
                String scriptPath = folderPath + "/memcache-getvalue.rb";
                String appPath = "jruby " + scriptPath + " " + tbServerIP.getText() + ":" + tbServerPort.getText() + " " + key;
                try {
                    Process p = rt.exec(appPath);
                    InputStream is = p.getInputStream();
                    InputStreamReader isr = new InputStreamReader(is);
                    BufferedReader read = new BufferedReader(isr);
                    String data;
                    String output = "";
                    while ((data = read.readLine()) != null) {
                        output = output + data + "\r\n";
                    }
                    txtOutputData.setText(output);
                } catch (IOException e) {
                    System.err.println("Failed using Ruby Marshal");
                }
            }
        } finally {
            mainPanel.setCursor(Cursor.getDefaultCursor());
        }
    }

    public void getKeysFromMemcache() {
        if (mcConnection.isAlive()) {
            try {
                ArrayList<String> keys = mcConnection.getMemcacheKeys();
                listKeys.removeAll();
                DefaultListModel dfm = new DefaultListModel();
                for (String key : keys) {
                    int pos = dfm.getSize();
                    dfm.add(pos, key);
                }
                listKeys.setModel(dfm);
                listKeys.repaint();
            } catch (IOException e) {
                //attempt reconnection
                try {
                    mcConnection.closeConnection();
                    if (mcConnection.connectToMemcacheServer()) {
                        getKeysFromMemcache();
                    }
                } catch(IOException ex) {
                    System.err.println("Failed reconnecting to memcache..");
                }
            }
        } else {
            System.err.println("Disconnected from memcache, reconnecting..");
            try {
                mcConnection.closeConnection();
                if (mcConnection.connectToMemcacheServer()) {
                    getKeysFromMemcache();
                }
            } catch(IOException e) {
                System.err.println("Failed reconnecting to memcache..");
            }
            //attempt to reconnect
        }
    }

    public void startPolling() {
        //start polling memcache for keys every 15 seconds
        timerPoller = new Timer();
        timerPoller.schedule(new TimerTask() {
            public void run() {
                getKeysFromMemcache();
            }
        }, 100, 15000);
    }

    @Action
    public void connectToMemcache() {
        this.mcConnection = new MemcacheConnection(tbServerIP.getText(), tbServerPort.getText());
        if (this.mcConnection.connectToMemcacheServer()) {
            //add a window closing event that kills everything
            Runtime.getRuntime().addShutdownHook(new Thread() {
                @Override
                public void run() {
                    try {
                        mcConnection.closeConnection();
                    } catch (IOException e) {
                        //do nothing, already closed
                    }
                }
            });
            //set up a timer that polls the server every 15 seconds
            btnConnect.setAction(actDisconnect);
            btnConnect.setText("Disconnect");
            startPolling();
        }
    }
    
    @Action
    public void disconnectFromMemcache() {
        try {
            mcConnection.closeConnection();
        } catch (IOException e) {}
        btnConnect.setAction(actConnect);
        btnConnect.setText("Connect");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listKeys;
    private javax.swing.JPanel mainPanel;
    private javax.swing.ButtonGroup radioOutputGroup;
    private javax.swing.JRadioButton radioOutputRaw;
    private javax.swing.JRadioButton radioOutputRuby;
    private javax.swing.JTextField tbServerIP;
    private javax.swing.JTextField tbServerPort;
    private javax.swing.JTextArea txtOutputData;
    // End of variables declaration//GEN-END:variables

    public MemcacheConnection mcConnection;
    private Timer timerPoller;

    private AbstractAction actDisconnect;
    private AbstractAction actConnect;

    private JDialog aboutBox;
}
